"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const abi_coder_1 = require("@vechain/ethers/utils/abi-coder");
const cry_1 = require("./cry");
class Coder extends abi_coder_1.AbiCoder {
    constructor() {
        super((type, value) => {
            if ((type.match(/^u?int/) && !Array.isArray(value) && typeof value !== 'object') ||
                value._ethersType === 'BigNumber') {
                return value.toString();
            }
            return value;
        });
    }
    encode(types, values) {
        try {
            return super.encode(types, values);
        }
        catch (err) {
            if (err.reason) {
                throw new Error(err.reason);
            }
            throw err;
        }
    }
    decode(types, data) {
        try {
            return super.decode(types, data);
        }
        catch (err) {
            if (err.reason) {
                throw new Error(err.reason);
            }
            throw err;
        }
    }
}
const coder = new Coder();
function formatSignature(fragment) {
    try {
        return abi_coder_1.formatSignature(fragment);
    }
    catch (err) {
        if (err.reason) {
            throw new Error(err.reason);
        }
        throw err;
    }
}
/** encode/decode parameters of contract function call, event log, according to ABI JSON */
var abi;
(function (abi) {
    /**
     * encode single parameter
     * @param type type of the parameter
     * @param value value of the parameter
     * @returns encoded value in hex string
     */
    function encodeParameter(type, value) {
        return coder.encode([type], [value]);
    }
    abi.encodeParameter = encodeParameter;
    /**
     * decode single parameter
     * @param type type of the parameter
     * @param data encoded parameter in hex string
     * @returns decoded value
     */
    function decodeParameter(type, data) {
        return coder.decode([type], data)[0];
    }
    abi.decodeParameter = decodeParameter;
    /**
     * encode a group of parameters
     * @param types type array
     * @param values value array
     * @returns encoded values in hex string
     */
    function encodeParameters(types, values) {
        return coder.encode(types.map(p => p.type), values);
    }
    abi.encodeParameters = encodeParameters;
    /**
     * decode a group of parameters
     * @param types type array
     * @param data encoded values in hex string
     * @returns decoded object
     */
    function decodeParameters(types, data) {
        const result = coder.decode(types.map(p => p.type), data);
        const decoded = {};
        types.forEach((t, i) => {
            decoded[i] = result[i];
            if (t.name) {
                decoded[t.name] = result[i];
            }
        });
        return decoded;
    }
    abi.decodeParameters = decodeParameters;
    /** for contract function */
    class Function {
        /**
         * create a function object
         * @param definition abi definition of the function
         */
        constructor(definition) {
            this.definition = definition;
            this.canonicalName = formatSignature(definition);
            this.signature = '0x' + cry_1.keccak256(this.canonicalName).slice(0, 4).toString('hex');
        }
        /**
         * encode input parameters into call data
         * @param args arguments for the function
         */
        encode(...args) {
            return this.signature + encodeParameters(this.definition.inputs, args).slice(2);
        }
        /**
         * decode output data
         * @param outputData output data to decode
         */
        decode(outputData) {
            return decodeParameters(this.definition.outputs, outputData);
        }
    }
    abi.Function = Function;
    /** for contract event */
    class Event {
        /** for contract event */
        constructor(definition) {
            this.definition = definition;
            this.canonicalName = formatSignature(definition);
            this.signature = '0x' + cry_1.keccak256(this.canonicalName).toString('hex');
        }
        /**
         * encode an object of indexed keys into topics.
         * @param indexed an object contains indexed keys
         */
        encode(indexed) {
            const topics = [];
            if (!this.definition.anonymous) {
                topics.push(this.signature);
            }
            for (const input of this.definition.inputs) {
                if (!input.indexed) {
                    continue;
                }
                const value = indexed[input.name];
                if (value === undefined || value === null) {
                    topics.push(null);
                }
                else {
                    let topic;
                    if (isDynamicType(input.type)) {
                        if (input.type === 'string') {
                            topic = '0x' + cry_1.keccak256(value).toString('hex');
                        }
                        else {
                            if (typeof value === 'string' && /^0x[0-9a-f]+$/i.test(value) && value.length % 2 === 0) {
                                topic = '0x' + cry_1.keccak256(Buffer.from(value.slice(2), 'hex')).toString('hex');
                            }
                            else {
                                throw new Error(`invalid ${input.type} value`);
                            }
                        }
                    }
                    else {
                        topic = encodeParameter(input.type, value);
                    }
                    topics.push(topic);
                }
            }
            return topics;
        }
        /**
         * decode event log
         * @param data data in event output
         * @param topics topics in event
         */
        decode(data, topics) {
            if (!this.definition.anonymous) {
                topics = topics.slice(1);
            }
            if (this.definition.inputs.filter(t => t.indexed).length !== topics.length) {
                throw new Error('invalid topics count');
            }
            const decodedNonIndexed = coder.decode(this.definition.inputs.filter(t => !t.indexed).map(t => t.type), data);
            const decoded = {};
            this.definition.inputs.forEach((t, i) => {
                if (t.indexed) {
                    const topic = topics.shift();
                    decoded[i] = isDynamicType(t.type) ?
                        topic : decodeParameter(t.type, topic);
                }
                else {
                    decoded[i] = decodedNonIndexed.shift();
                }
                if (t.name) {
                    decoded[t.name] = decoded[i];
                }
            });
            return decoded;
        }
    }
    abi.Event = Event;
    function isDynamicType(type) {
        return type === 'bytes' || type === 'string' || type.endsWith('[]');
    }
})(abi = exports.abi || (exports.abi = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FiaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUErRjtBQUMvRiwrQkFBaUM7QUFFakMsV0FBWSxTQUFRLG9CQUFRO0lBQ3hCO1FBQ0ksS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7Z0JBQzVFLEtBQUssQ0FBQyxXQUFXLEtBQUssV0FBVyxFQUFFO2dCQUNuQyxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQTthQUMxQjtZQUNELE9BQU8sS0FBSyxDQUFBO1FBQ2hCLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFlLEVBQUUsTUFBYTtRQUN4QyxJQUFJO1lBQ0EsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtTQUNyQztRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO2dCQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO2FBQzlCO1lBQ0QsTUFBTSxHQUFHLENBQUE7U0FDWjtJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBZSxFQUFFLElBQVk7UUFDdkMsSUFBSTtZQUNBLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDbkM7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDWixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUM5QjtZQUNE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