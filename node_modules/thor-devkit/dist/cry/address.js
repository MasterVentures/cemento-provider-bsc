"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const keccak_1 = require("./keccak");
/**
 * derive Address from public key
 * @param pubKey the public key
 */
function publicKeyToAddress(pubKey) {
    return keccak_1.keccak256(pubKey.slice(1)).slice(12);
}
exports.publicKeyToAddress = publicKeyToAddress;
/**
 * to check if a value presents an address
 * @param v the value to be checked
 */
function isAddress(v) {
    return typeof v === 'string' && /^0x[0-9a-f]{40}$/i.test(v);
}
exports.isAddress = isAddress;
/**
 * encode the address to checksum address that is compatible with eip-55
 * @param address input address
 */
function toChecksumAddress(address) {
    if (!isAddress(address)) {
        throw new Error('invalid address');
    }
    address = address.slice(2).toLowerCase();
    const hash = keccak_1.keccak256(address);
    let checksumAddress = '0x';
    for (let i = 0; i < address.length; i++) {
        // tslint:disable-next-line:no-bitwise
        let byte = hash[i >> 1];
        if (i % 2 === 0) {
            // tslint:disable-next-line:no-bitwise
            byte >>= 4;
        }
        if (byte % 16 >= 8) {
            checksumAddress += address[i].toUpperCase();
        }
        else {
            checksumAddress += address[i];
        }
    }
    return checksumAddress;
}
exports.toChecksumAddress = toChecksumAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jcnkvYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFvQztBQUNwQzs7O0dBR0c7QUFDSCw0QkFBbUMsTUFBYztJQUM3QyxPQUFPLGtCQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUMvQyxDQUFDO0FBRkQsZ0RBRUM7QUFFRDs7O0dBR0c7QUFDSCxtQkFBMEIsQ0FBTTtJQUM1QixPQUFPLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0QsQ0FBQztBQUZELDhCQUVDO0FBRUQ7OztHQUdHO0FBQ0gsMkJBQWtDLE9BQWU7SUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUE7S0FDckM7SUFDRCxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUN4QyxNQUFNLElBQUksR0FBRyxrQkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRS9CLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQTtJQUMxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxzQ0FBc0M7UUFDdEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2Isc0NBQXNDO1lBQ3RDLElBQUksS0FBSyxDQUFDLENBQUE7U0FDYjtRQUVELElBQUksSUFBSSxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDaEIsZUFBZSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtTQUM5QzthQUFNO1lBQ0gsZUFBZSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNoQztLQUNKO0lBQ0QsT0FBTyxlQUFlLENBQUE7QUFDMUIsQ0FBQztBQXZCRCw4Q0F1QkMifQ==