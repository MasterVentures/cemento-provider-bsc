import { blake2b256, publicKeyToAddress, secp256k1 } from './cry';
const fastJsonStableStringify = require('fast-json-stable-stringify');
export var Certificate;
(function (Certificate) {
    function safeToLowerCase(str) {
        return typeof str === 'string' ? str.toLowerCase() : str;
    }
    /**
     * deterministically encode cert into JSON
     * @param cert cert object
     */
    function encode(cert) {
        return fastJsonStableStringify(Object.assign({}, cert, { signer: safeToLowerCase(cert.signer), signature: cert.signature ? safeToLowerCase(cert.signature) : cert.signature }));
    }
    Certificate.encode = encode;
    /**
     * verify the cert
     * @param cert cert object with signature
     */
    function verify(cert) {
        if (!cert.signature) {
            throw new Error('signature missing');
        }
        const signature = cert.signature;
        if (!/^0x[0-9a-f]+$/i.test(signature) || signature.length % 2 !== 0) {
            throw new Error('invalid signature');
        }
        const encoded = encode(Object.assign({}, cert, { signature: undefined }));
        const signingHash = blake2b256(encoded);
        const pubKey = secp256k1.recover(signingHash, Buffer.from(signature.slice(2), 'hex'));
        if ('0x' + publicKeyToAddress(pubKey).toString('hex') !== safeToLowerCase(cert.signer)) {
            throw new Error('signature does not match with signer');
        }
    }
    Certificate.verify = verify;
})(Certificate || (Certificate = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2VydGlmaWNhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFDakUsTUFBTSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtBQW1CckUsTUFBTSxLQUFXLFdBQVcsQ0FzQzNCO0FBdENELFdBQWlCLFdBQVc7SUFDeEIseUJBQXlCLEdBQVc7UUFDaEMsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBO0lBQzVELENBQUM7SUFDRDs7O09BR0c7SUFDSCxnQkFBdUIsSUFBaUI7UUFDcEMsT0FBTyx1QkFBdUIsbUJBQ3ZCLElBQUksSUFDUCxNQUFNLEVBQUUsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDcEMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQ3BFLENBQUE7SUFDaEIsQ0FBQztJQU5lLGtCQUFNLFNBTXJCLENBQUE7SUFFRDs7O09BR0c7SUFDSCxnQkFBdUIsSUFBaUI7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1NBQ3ZDO1FBQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqRSxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7U0FDdkM7UUFFRCxNQUFNLE9BQU8sR0FBRyxNQUFNLG1CQUFNLElBQUksSUFBRSxTQUFTLEVBQUUsU0FBUyxJQUFHLENBQUE7UUFDekQsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXZDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBRXJGLElBQUksSUFBSSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BGLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQTtTQUMxRDtJQUNMLENBQUM7SUFqQmUsa0JBQU0sU0FpQnJCLENBQUE7QUFDTCxDQUFDLEVBdENnQixXQUFXLEtBQVgsV0FBVyxRQXNDM0IifQ==