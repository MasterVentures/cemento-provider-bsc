import { randomBytes } from 'crypto';
const secp256k1Funs = require('secp256k1');
/** secp256k1 methods set */
export var secp256k1;
(function (secp256k1) {
    /** generate private key  */
    function generatePrivateKey() {
        for (;;) {
            const privKey = randomBytes(32);
            if (secp256k1Funs.privateKeyVerify(privKey)) {
                return privKey;
            }
        }
    }
    secp256k1.generatePrivateKey = generatePrivateKey;
    /**
     * derive public key(uncompressed) from private key
     * @param privKey the private key
     */
    function derivePublicKey(privKey) {
        return secp256k1Funs.publicKeyCreate(privKey, false /* uncompressed */);
    }
    secp256k1.derivePublicKey = derivePublicKey;
    /**
     * sign a message using elliptic curve algorithm on the curve secp256k1
     * @param msgHash hash of message
     * @param privKey serialized private key
     */
    function sign(msgHash, privKey) {
        const sig = secp256k1Funs.sign(msgHash, privKey);
        const packed = Buffer.alloc(65);
        sig.signature.copy(packed);
        packed[64] = sig.recovery;
        return packed;
    }
    secp256k1.sign = sign;
    /**
     * recovery signature to public key
     * @param msgHash hash of message
     * @param sig signature
     */
    function recover(msgHash, sig) {
        if (sig.length !== 65) {
            throw new Error('invalid signature');
        }
        const recovery = sig[64];
        if (recovery !== 0 && recovery !== 1) {
            throw new Error('invalid signature recovery');
        }
        return secp256k1Funs.recover(msgHash, sig.slice(0, 64), recovery, false);
    }
    secp256k1.recover = recover;
})(secp256k1 || (secp256k1 = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcDI1NmsxLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NyeS9zZWNwMjU2azEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUNwQyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUE7QUFFMUMsNEJBQTRCO0FBQzVCLE1BQU0sS0FBVyxTQUFTLENBZ0R6QjtBQWhERCxXQUFpQixTQUFTO0lBQ3RCLDRCQUE0QjtJQUM1QjtRQUNJLFNBQVU7WUFDTixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDL0IsSUFBSSxhQUFhLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8sT0FBTyxDQUFBO2FBQ2pCO1NBQ0o7SUFDTCxDQUFDO0lBUGUsNEJBQWtCLHFCQU9qQyxDQUFBO0lBRUQ7OztPQUdHO0lBQ0gseUJBQWdDLE9BQWU7UUFDM0MsT0FBTyxhQUFhLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsa0JBQWtCLENBQVcsQ0FBQTtJQUNyRixDQUFDO0lBRmUseUJBQWUsa0JBRTlCLENBQUE7SUFFRDs7OztPQUlHO0lBQ0gsY0FBcUIsT0FBZSxFQUFFLE9BQWU7UUFDakQsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUMvQixHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUMxQixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQTtRQUN6QixPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDO0lBTmUsY0FBSSxPQU1uQixDQUFBO0lBRUQ7Ozs7T0FJRztJQUNILGlCQUF3QixPQUFlLEVBQUUsR0FBVztRQUNoRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtTQUN2QztRQUNELE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN4QixJQUFJLFFBQVEsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtZQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUE7U0FDaEQ7UUFFRCxPQUFPLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQVcsQ0FBQTtJQUN0RixDQUFDO0lBVmUsaUJBQU8sVUFVdEIsQ0FBQTtBQUNMLENBQUMsRUFoRGdCLFNBQVMsS0FBVCxTQUFTLFFBZ0R6QiJ9